#!/usr/bin/env python3

# Copyright 2015 Curtis Sand
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A script to simplify accessing GPG encrypted files and containers safely.

The script will decrypt the encrypted file in a temporary, secure location on a
fresh TMPFS mount. Then afterwards the script will reencrypt the contents and
clean up any plain text secrets to minimize the exposure of your encrypted
data.
"""

import sys
import argparse
import os
import subprocess
import tempfile
import hashlib
import tarfile


VERSION = "0.0"
VERBOSE = False
DEBUG = False


def main():
    args = parse_cmd_line()
    verify_input_file(args.file)

    with Umask(0o77), \
            tempfile.TemporaryDirectory() as temp_dir, \
            Tmpfs(temp_dir, size=get_tmpfs_mount_size(args)):

        plain_payload = os.path.join(temp_dir, 'payload')
        Crypter.decrypt(args.file, plain_payload)

        before_checksum = calculate_file_checksum(plain_payload)

        tarball_extracted = extract_tarball_payload(plain_payload)

        user_interactive_shell(temp_dir)

        if tarball_extracted:
            recreate_tarball_payload(plain_payload)

        reencrypt = True
        after_checksum = calculate_file_checksum(plain_payload)
        if before_checksum == after_checksum:
            reencrypt = False
            answer = input('The checksum of the payload has not changed. '
                           'Rencrypt anyways? (y/N) ')
            if answer.strip().lower() in ['y', 'yes']:
                reencrypt = True

        if reencrypt:
            Crypter.encrypt(plain_payload, args.file)

    return 0


def parse_cmd_line():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '--version', help='Print the version and exit.', action='version',
        version='%(prog)s {}'.format(VERSION))
    DebugAction.add_parser_argument(parser)
    VerboseAction.add_parser_argument(parser)

    parser.add_argument(dest='file', metavar='FILE',
                        help='The encrypted file to operate on.')
    return parser.parse_args()


def verify_input_file(filename):
    """Verify that the input file exists and is an encrypted PGP message."""
    if not os.path.exists(filename):
        raise FileNotFoundError('The file "{}" does not appear to '
                                'exist.'.format(filename))
    file_type_output = subprocess.check_output(['file', '--mime-type',
                                                filename])
    if "application/pgp" not in str(file_type_output).lower():
        raise FileTypeError('The given file does not appear to be a PGP '
                            'encrypted message.')


def get_tmpfs_mount_size(args):
    """Determine an appropriate size for the TMPFS filesystem.

    For a reasonable safety margin make the TMPFS mount double the size of the
    encrypted payload itself. This should provide enough free space for new
    content to be added to the payload before re-encryption.
    """
    file_size = os.path.getsize(args.file)
    dprint('payload size is %d' % file_size)
    if file_size < 1024 * 1024:
        # Don't bother with TMPFS less than 1Mb
        mount_size = 1024 * 1024
    else:
        mount_size = 2 * file_size
    dprint('tmpfs mount size will be %d' % mount_size)
    return mount_size


def user_interactive_shell(working_directory):
    subprocess.call(['/bin/bash'], cwd=working_directory)


def calculate_file_checksum(filepath):
    """Calculate the SHA256 hash of the given file."""
    checksum = hashlib.sha256()
    with open(filepath, 'rb') as fin:
        for line in fin:
            checksum.update(line)
    digest = checksum.hexdigest()
    dprint('Checksum of {}: {}'.format(filepath, digest))
    return digest


def extract_tarball_payload(plain_payload):
    if not tarfile.is_tarfile(plain_payload):
        vprint('Not a tarball.')
        return False
    vprint('Extracting the tarball.')
    tarball = tarfile.TarFile(plain_payload)

    content = 'content'
    content_dir = os.path.dirname(plain_payload)
    if not (content in tarball.getnames() and
            tarball.getmember(content).isdir()):
        content_dir = os.path.join(os.path.dirname(plain_payload), content)
        os.makedir(content_dir)

    tarball.extractall(path=content_dir)
    return True


def recreate_tarball_payload(plain_payload):
    backup = "{}_orig".format(plain_payload)
    vprint('Backup original tarball to {}'.format(backup))
    os.move(plain_payload, backup)
    vprint('Rebuilding tarball {}'.format(plain_payload))
    tarball = tarfile.TarFile(plain_payload)
    tarball.add('content')
    tarball.close()


class Umask(object):
    """A basic state manager for temporarily changing the umask."""
    def __init__(self, new_umask=None):
        self.original = None
        self.new_umask = new_umask

    def set(self):
        vprint('Setting umask to "{}"'.format(self.new_umask))
        self.original = os.umask(self.new_umask)

    def restore(self):
        if self.original is None:
            vprint('No umask changes to restore.')
        vprint('Restoring umask to "{}"'.format(self.original))
        os.umask(self.original)

    def __enter__(self):
        self.set()

    def __exit__(self, *args):
        self.restore()


class Tmpfs(object):
    """A context manager for mounting TMPFS filesystems."""
    def __init__(self, mount_point, size=None):
        if not os.path.exists(mount_point) and os.path.isdir(mount_point):
            raise NotADirectoryError(
                'The mount point "{}" does not appear to be a valid '
                'directory. quitting.'.format(mount_point))
        self.mount_point = mount_point

        if size is None:
            size = 1024 * 1024  # default size of 1Mb if not specified
        elif isinstance(size, str):
            size = Tmpfs.parse_string_size()
        self.size = size

    @classmethod
    def parse_string_size(self, size):
        si = {'k': 1024, 'm': 1024 * 1024, 'g': 1024 * 1024 * 1024}
        if size[-1].isdigit():
            return int(size)
        try:
            num = int(size[:-1])
            return num * si[size[-1]]
        except (KeyError, ValueError):
            raise ValueError('Unable to parse "{}" into a valid file '
                             'size.'.format(size))

    def is_mounted(self):
        output = subprocess.check_output(['mount'])
        mounts = [line.decode().split(' ')[2] for line in output.splitlines()
                  if line.decode().split(' ')[0] == 'tmpfs']
        return self.mount_point in mounts

    def mount(self):
        vprint('Mounting TPMFS filesystem...')
        dprint('TMPFS size: {}'.format(self.size))
        options = 'size=%d' % self.size
        options += ',uid=%d,gid=%d' % (os.getuid(), os.getgid())
        rc = subprocess.check_call(['sudo', 'mount', '-t', 'tmpfs', '-o',
                                    options, 'tmpfs', self.mount_point])
        if rc:
            raise TmpfsError('Failed to mount TMPFS filesystem of size {} at '
                             'mount point "{}". The mount command returned '
                             'rc={}.'.format(self.size, self.mount_point, rc))

    def unmount(self):
        vprint('Unmounting TMPFS filesystem...')
        rc = subprocess.check_call(['sudo', 'umount', self.mount_point])
        if rc:
            raise TmpfsError(
                'Failed to unmount the TMPFS filesystem. Please clean up '
                'mount point {} manually.'.format(self.mount_point))

    def __enter__(self):
        self.mount()

    def __exit__(self, *args):
        self.unmount()


class Crypter(object):

    gpg = '/usr/bin/gpg2'

    @classmethod
    def decrypt(cls, payload, destination):
        vprint('Decrypting payload')
        cls._run([Crypter.gpg, '-o', destination, payload], 'decrypt')

    @classmethod
    def encrypt(cls, payload, destination):
        vprint('Reencrpting payload')
        cls._run([Crypter.gpg, '--encrypt', '--sign', '--armor',
                  '--recipient', 'Curtis Sand', '-o', destination,
                  '--yes', payload], 'encrypt')

    @classmethod
    def _run(cls, cmd, action_msg):
        try:
            dprint('executing command {}'.format(cmd))
            subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as error:
            raise GpgError('Failed to {} payload: GPG returned error code {}.'
                           '\nstderr>>>\n{}\n<<<stderr'.format(
                               action_msg, error.returncode,
                               error.output.decode().replace('\n', '\n    ')))


class UmaskError(Exception):
    pass


class TmpfsError(Exception):
    pass


class FileTypeError(FileNotFoundError):
    pass


class GpgError(Exception):
    pass


def dprint(msg):
    """Conditionally print a debug message."""
    if DEBUG:
        print(msg)


def vprint(msg):
    """Conditionally print a verbose message."""
    if VERBOSE:
        print(msg)


class DebugAction(argparse.Action):
    """Enable the debugging output mechanism."""

    flag = '--debug'
    help = 'Enable debugging output.'

    @classmethod
    def add_parser_argument(cls, parser):
        parser.add_argument(cls.flag, help=cls.help, action=cls)

    def __init__(self, option_strings, dest, **kwargs):
        super(DebugAction, self).__init__(option_strings, dest, nargs=0,
                                          default=False, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        print('Enabling debugging output.')
        global DEBUG
        DEBUG = True
        setattr(namespace, self.dest, True)


class VerboseAction(DebugAction):
    """Enable the verbose output mechanism."""

    flag = '--verbose'
    help = 'Enable verbose output.'

    def __call__(self, parser, namespace, values, option_string=None):
        print('Enabling verbose output.')
        global VERBOSE
        VERBOSE = True
        setattr(namespace, self.dest, True)


if __name__ == '__main__':
    try:
        sys.exit(main())
    except SystemExit:
        sys.exit(0)
    except KeyboardInterrupt:
        print('...interrupted by user, exiting.')
        sys.exit(1)
    except Exception as exc:
        if DEBUG:
            raise
        else:
            print('Unhandled Error:\n{}'.format(exc))
            sys.exit(1)
