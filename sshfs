#!/usr/bin/env python

# Copyright 2015 Curtis Sand
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Provides a wrapper around the 'sshfs' and 'fusermount' utilities to simplify
interactions with SSHFS mounts.
"""
import re
import os
import sys
import argparse
from subprocess import Popen, PIPE, STDOUT
from itertools import chain

VERSION = 'v0.1'


def main():
    parser = argparse.ArgumentParser(version=VERSION, description=__doc__)
    parser.add_argument('-l', '--list', dest='action', action='store_const',
                        const=Actions.list, help='List existing mountpoints.')
    parser.add_argument('-m', '--mount', dest='action', action='store_const',
                        const=Actions.mount, help='Create a new mountpoint.')
    parser.add_argument('-u', '--umount', dest='action', action='store_const',
                        const=Actions.umount,
                        help='Remove an existing mountpoint.')

    parser.set_defaults(action=Actions.list)
    opts, args = parser.parse_known_args()

    try:
        sshfs = SSHFS()
        opts.action(sshfs, args)
    except SSHFSError, exc:
        print exc.message
        return 1
    return 0


class Actions(object):
    @staticmethod
    def list(sshfs, args):
        sshfs.list_mountpoints()

    @staticmethod
    def mount(sshfs, args):
        if len(args) < 2 or len(args) > 2:
            raise SSHFSError(
                    'Bad Argument Count: Creating an SSHFS mount '
                    'requires a Source and a Destination argument only.')
        print "Mounting %s to %s..." % (args[0], args[1])
        sshfs.mount(args[0], args[1])

    @staticmethod
    def umount(sshfs, args):
        if len(args) < 1 or len(args) > 1:
            raise SSHFSError(
                    'Bad Argument Count: Removing an SSHFS mount '
                    'requires an existing mountpoint as the argument.')
        print "Unmounting %s..." % args[0]
        sshfs.unmount(args[0])


class Mountpoints(list):

    @staticmethod
    def load():
        mountpoints = Mountpoints()
        with open('/etc/mtab', 'r') as fin:
            for line in fin.readlines():
                if re.search('sshfs', line):
                    mountpoints.append(line.split(' ')[1])
        mountpoints.sort()
        return mountpoints

    def __str__(self):
        return '\n'.join(['%s: %s' % (count, mountpoint) for
                          count, mountpoint in enumerate(self)])


class SSHFS(object):

    def __init__(self):
        self.mountpoints = None
        self._load_mountpoints()
        self.sshfs_binary = '/usr/bin/sshfs'
        self.fusermount_binary = '/usr/bin/fusermount'
        self.mount_options = ['nonempty', 'allow_other', 'kernel_cache',
                              'auto_cache', 'reconnect', 'follow_symlinks',
                              'transform_symlinks']

    def _load_mountpoints(self):
        self.mountpoints = Mountpoints.load()

    def list_mountpoints(self):
        print self.mountpoints

    def _format_mount_options(self):
        return list(chain.from_iterable(zip(['-o'] * len(self.mount_options),
                                            self.mount_options)))

    def mount(self, source, dest):
        command = ([self.sshfs_binary] +
                   self._format_mount_options() +
                   [source, dest])
        if not os.path.exists(dest):
            os.mkdir(dest)
        _execute(command)
        self._load_mountpoints()

    def unmount(self, mountpoint):
        """Mountpoint can either be a path or an index for self.mountpoints"""
        err_msg = ("The given mountpoint '%s' doesn't appear to exist." %
                   mountpoint)
        if mountpoint.isdigit():
            try:
                mountpoint = self.mountpoints[int(mountpoint)]
            except IndexError:
                raise Exception(err_msg)
        elif not os.path.exists(mountpoint):
            raise Exception(err_msg)

        command = [self.fusermount_binary, '-u', mountpoint]
        _execute(command)

        try: # remove mountpoint if empty
            os.rmdir(mountpoint)
        except OSError, e: # ignore error if directory not empty
            if e.args[0] == 39 and 'not empty' in e.args[1].lower():
                pass
        self._load_mountpoints()


class SSHFSError(Exception):
    pass


def _execute(cmd):
    proc = Popen(cmd, stdout=PIPE, stderr=STDOUT)
    output, _ = proc.communicate()
    if proc.returncode:
        print "Subcommand Failed:\n%s" % output
    return proc.returncode


if __name__ == '__main__':
    sys.exit(main())
