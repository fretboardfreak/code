#!/usr/bin/env python
'''
'''
import sys, optparse, subprocess as sp, time

def parseCmdLine():
    '''
    manage cli invocation
    '''
    usage = '%prog'
    version = '%prog v0.0'
    description = __doc__
    parser = optparse.OptionParser( usage = usage, 
                                    version = version,
                                    description = description )
    parser.add_option('-p', '--progress', help='show a progress bar',
                      dest='progress', action='store_true', default=False)
    return parser.parse_args()


def progressBar(seconds, text):
    cmd = ['zenity','--progress', '--text=%s' % text, '--auto-close']
    zenity = sp.Popen(cmd, stdin=sp.PIPE)
    
    percent = 0
    step = (seconds / 100.0)
    steps = list()
    x = 0
    while x <= seconds:
        steps.append(x)
        x += step
    
    for i in steps:
        time.sleep(step)
        percent += 1
        if percent > 100:
            break
        zenity.stdin.write('%d\n' % percent)

    pid = zenity.wait()
    if pid:
        raise Exception('Timer Cancelled')


def main():
    timeUnits = {'s':1, 'm':60, 'h':3600, 'd':86400}

    opts, args = parseCmdLine()

    if len(args) < 1:
        raise Exception('timeProgress requires at least one time argument')
    if len(args) >= 2:
        text = args[1]        
    else:
        text = "Running Timer..."

    arg = args[0]
    unit = arg[-1]
    if not unit in timeUnits.keys():
        raise Exception('timeProgress: Time unit not recognized.  '
                        'use: m, h or d')

    t = float(arg[:-1])
    seconds = long(t * timeUnits[unit])

    if opts.progress:
        progressBar(seconds, text)
    else:
        time.sleep(seconds)

    cmd = ['zenity', '--info', '--text=%s' % text]
    alert = sp.Popen(cmd)
    return alert.wait()



if __name__ == '__main__':
    try:
        sys.exit( main() )
    except KeyboardInterrupt:
        print 'Interrupted by User.'
        sys.exit( 1 )


